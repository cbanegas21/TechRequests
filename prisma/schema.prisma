// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id     String  @id @default(cuid())
  name   String
  email  String  @unique
  role   String  // "csp" or "agent"
  active Boolean @default(true)

  // Relations
  requestedTickets Ticket[]    @relation("TicketRequester")
  assignedTickets  Ticket[]    @relation("TicketAssignee")
  comments         Comment[]
  auditLogs        AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Ticket {
  id               String    @id @default(cuid())
  shortId          String    @unique // TR-0001 format
  title            String
  description      String    // Rich text content
  requesterUserId  String?
  requesterName    String?   // Free text for non-listed users
  requesterEmail   String?
  accountName      String
  category         String
  urgency          String    // "Low", "Medium", "High", "Critical"
  status           String    @default("New") // "New", "In Progress", "Done", "GitLab Ticket", "Escalation", "Recurring Issue", "Reopened", "Declined"
  assigneeUserId   String?
  dueDate          DateTime?
  gitlabLink       String?
  attachments      String?   // JSON array of URLs
  tags             String?   // JSON array of strings

  // Relations
  requester User?      @relation("TicketRequester", fields: [requesterUserId], references: [id])
  assignee  User?      @relation("TicketAssignee", fields: [assigneeUserId], references: [id])
  comments  Comment[]
  auditLogs AuditLog[]
  sla       SLA?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

model Comment {
  id         String  @id @default(cuid())
  ticketId   String
  authorUserId String?
  authorName String? // For non-user comments
  body       String  // Rich text content
  isInternal Boolean @default(false)

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User?  @relation(fields: [authorUserId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments")
}

model SLA {
  id                    String    @id @default(cuid())
  ticketId              String    @unique
  firstResponseAt       DateTime?
  resolvedAt            DateTime?
  reopenedCount         Int       @default(0)

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sla")
}

model AuditLog {
  id        String  @id @default(cuid())
  ticketId  String
  actorUserId String?
  actorName String? // For system actions or non-user actions
  action    String  // e.g., "status_changed", "assigned", "commented"
  fromValue String?
  toValue   String?

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  actor  User?  @relation(fields: [actorUserId], references: [id])

  createdAt DateTime @default(now())

  @@map("audit_logs")
}
